name: Update Xenia Canary Releases

on:
  schedule:
    - cron: "0 * * * *" # Runs at the start of every hour
  workflow_dispatch:

jobs:
  update-canary:
    name: Fetch and Update Xenia Canary Releases
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COMMIT_TOKEN }}
          sparse-checkout: |
            data/canary_releases.json
            scripts/canary_parser.py
          sparse-checkout-cone-mode: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: python -m pip install --upgrade pip

      - name: Fetch Xenia Canary Releases
        id: fetch_canary
        env:
          AUTH_TOKEN: ${{ secrets.COMMIT_TOKEN }}
        run: |
          set -e
          python scripts/canary_parser.py

      - name: Commit and push changes
        run: |
          git config --global user.name 'xeniamanager-ci'
          git config --global user.email '214508751+xeniamanager-ci@users.noreply.github.com'

          OLD_FILE=$(mktemp)
          NEW_FILE=$(mktemp)
          git show HEAD:data/canary_releases.json 2>/dev/null > $OLD_FILE || echo '[]' > $OLD_FILE
          cat data/canary_releases.json > $NEW_FILE

          # Determine commit message
          python - <<'PYTHON' "$OLD_FILE" "$NEW_FILE" > commit_message.txt
          import json, sys, os

          old_path, new_path = sys.argv[1], sys.argv[2]

          with open(old_path) as f:
              try:
                  old = json.load(f)
              except:
                  old = []

          with open(new_path) as f:
              new = json.load(f)

          # Initial commit if old file is empty
          if not old or not os.path.exists(old_path):
              print("chore: Initial Xenia Canary Releases")
              print("\n- First parsing of Xenia Canary Releases")
              sys.exit(0)

          def extract_tags(data):
              return {r["tag_name"] for r in data}

          old_tags = extract_tags(old)
          new_tags = extract_tags(new)
          added = sorted(new_tags - old_tags, reverse=True)

          if not added:
              print("chore: Update Xenia Canary Releases\n\n(no new tags detected)")
          else:
              print("chore: Update Xenia Canary Releases\n")
              for tag in added:
                  print(f"- Added new tag: {tag}")
          PYTHON

          git add data/canary_releases.json

          # Check if there are changes
          if git diff --cached --quiet; then
            echo "No changes detected in canary_releases.json"
            exit 0
          fi

          echo "Generated commit message:"
          cat commit_message.txt

          git commit -F commit_message.txt
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "${GITHUB_REF_NAME}"
